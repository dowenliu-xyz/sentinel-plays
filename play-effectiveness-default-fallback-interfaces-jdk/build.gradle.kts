dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("com.alibaba.csp:sentinel-annotation-aspectj")
    implementation("com.alibaba.csp:sentinel-core")
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks {
    create("generateDemos") {
        val basePkg = "org.example.eff.df.interfaces.jdk"
        doLast {
            mkdirs(basePkg)
            val cases = generateCases()
            cases.forEach { generateDemo(basePkg, it) }
            cases.forEach { generateCaseRunner(basePkg, it) }
        }
    }
}

fun mkdirs(basePkg: String) {
    val javaPkgPath = "src/main/java/${basePkg.replace(".", "/")}/demos"
    mkdir(javaPkgPath)
    val kotlinPkgPath = "src/main/kotlin/${basePkg.replace(".", "/")}/demos"
    mkdir(kotlinPkgPath)
}

fun generateCases(): List<Case> {
    val cases = mutableListOf<Case>()
    for (classAnnoOnSuper in ClassAnno.values()) {
        for (originMethodInSuper in OriginMethodInSuper.values()) {
            for (handlerInSuper in HandlerInSuper.values()) {
                for (classAnnoOnClass in ClassAnno.values()) {
                    for (originMethodInClass in OriginMethodInClass.values()) {
                        if (!originMethodInSuper.exist && !originMethodInClass.exist) {
                            continue
                        }
                        if (originMethodInSuper.requireOverride && !originMethodInClass.exist) {
                            continue
                        }
                        for (hasHandlerInClass in arrayOf(true, false)) {
                            if (handlerInSuper.requireOverride && !hasHandlerInClass) {
                                continue
                            }
                            cases.add(
                                Case(
                                    sn = "%04d".format(cases.size + 1),
                                    classAnnoOnSuper = classAnnoOnSuper,
                                    originMethodInSuper = originMethodInSuper,
                                    handlerInSuper = handlerInSuper,
                                    classAnnoOnClass = classAnnoOnClass,
                                    originMethodInClass = originMethodInClass,
                                    hasHandlerInClass = hasHandlerInClass,
                                )
                            )
                        }
                    }
                }
            }
        }
    }
    return cases
}

fun generateDemo(basePkg: String, case: Case) {
    logger.lifecycle("generateDemo: $case")
    val javaPkgPath = "src/main/java/${basePkg.replace(".", "/")}/demos"
    val kotlinPkgPath = "src/main/kotlin/${basePkg.replace(".", "/")}/demos"
    generateJavaInterface(javaPkgPath, basePkg, case, "Java")
    generateJavaDemo(javaPkgPath, basePkg, case, "Java")
    generateJavaInterface(javaPkgPath, basePkg, case, "Kotlin")
    generateKotlinDemo(kotlinPkgPath, basePkg, case, "Java")
    generateKotlinInterface(kotlinPkgPath, basePkg, case, "Java")
    generateJavaDemo(javaPkgPath, basePkg, case, "Kotlin")
    generateKotlinInterface(kotlinPkgPath, basePkg, case, "Kotlin")
    generateKotlinDemo(kotlinPkgPath, basePkg, case, "Kotlin")
}

fun generateJavaInterface(pkgPath: String, basePkg: String, case: Case, classLang: String) {
    val interfaceName = "Case${case.sn}JavaInterfaceFor$classLang"
    val file = File("$pkgPath/$interfaceName.java")
    file.writeText(
        """
                        |// Generated by generateDemo task, DO NOT MODIFY
                        |package $basePkg.demos;
                        |
        """.trimMargin()
    )
    if (case.classAnnoOnSuper.exist || case.originMethodInSuper.withAnno) {
        file.appendText(
            """
                        |
                        |import com.alibaba.csp.sentinel.annotation.SentinelResource;
            """.trimMargin()
        )
    }
    val handlerInSuper = case.handlerInSuper.exist && (case.classAnnoOnSuper.hasAttr ||
            case.classAnnoOnClass.hasAttr ||
            case.originMethodInClass.hasAttr ||
            case.originMethodInSuper.hasAttr)
    if (handlerInSuper) {
        if (!case.handlerInSuper.requireOverride) {
            file.appendText(
                """
                        |
                        |import $basePkg.biz.EffAnno;
                        |import $basePkg.biz.HandlerLocation;
                """.trimMargin()
            )
        }
    }
    if (case.originMethodInSuper.exist || handlerInSuper) {
        file.appendText(
            """
                        |
                        |import org.jetbrains.annotations.NotNull;
                        |import org.jetbrains.annotations.Nullable;
           """.trimMargin()
        )
    }
    file.appendText("\n")
    if (handlerInSuper && !case.handlerInSuper.requireOverride) {
        file.appendText(
            """
                        |
                        |import static $basePkg.biz.Greeting.doDefaultFallback;
            """.trimMargin()
        )
    }
    if (case.originMethodInSuper.exist && !case.originMethodInSuper.requireOverride) {
        file.appendText(
            """
                        |
                        |import static $basePkg.biz.Greeting.doGreeting;
            """.trimMargin()
        )
    }
    file.appendText("\n")
    file.appendText(
        """
                        |
                        |/**
                        | * Case: $case
                        | */
                        |@SuppressWarnings("unused")
        """.trimMargin()
    )
    if (case.classAnnoOnSuper.exist) {
        val optionalAttr = if (case.classAnnoOnSuper.hasAttr) ", defaultFallback = \"superClassHandler\"" else ""
        file.appendText(
            """
                        |
                        |@SentinelResource(value = "demo"${optionalAttr})
            """.trimMargin()
        )
    }
    file.appendText(
        """
                        |
                        |public interface $interfaceName {
                        |
        """.trimMargin()
    )
    if (case.originMethodInSuper.exist) {
        if (case.originMethodInSuper.withAnno) {
            val optionalAttr = if (case.originMethodInSuper.hasAttr) ", defaultFallback = \"superMethodHandler\"" else ""
            file.appendText(
                """
                        |
                        |    @SentinelResource(value = "demo"$optionalAttr)
                """.trimMargin()
            )
        }
        if (case.originMethodInSuper.requireOverride) {
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    String greeting(@Nullable String name);
                        |
                """.trimMargin()
            )
        } else {
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    default String greeting(@Nullable String name) {
                        |        return "super:" + doGreeting(name);
                        |    }
                        |
                """.trimMargin()
            )
        }
    }
    if (handlerInSuper) {
        if (case.classAnnoOnSuper.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    String superClassHandler(@Nullable Throwable e);
                        |
                        |    @NotNull
                        |    String superClassHandler();
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    default String superClassHandler(@Nullable Throwable e) {
                        |        return EffAnno.SuperClassAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                        |    @NotNull
                        |    default String superClassHandler() {
                        |        return EffAnno.SuperClassAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback();
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
        if (case.originMethodInSuper.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    String superMethodHandler(@Nullable Throwable e);
                        |
                        |    @NotNull
                        |    String superMethodHandler();
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    default String superMethodHandler(@Nullable Throwable e) {
                        |        return EffAnno.SuperMethodAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                        |    @NotNull
                        |    default String superMethodHandler() {
                        |        return EffAnno.SuperMethodAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback();
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
        if (case.classAnnoOnClass.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    String classHandler(@Nullable Throwable e);
                        |
                        |    @NotNull
                        |    String classHandler();
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    default String classHandler(@Nullable Throwable e) {
                        |        return EffAnno.ClassAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                        |    @NotNull
                        |    default String classHandler() {
                        |        return EffAnno.ClassAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback();
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
        if (case.originMethodInClass.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    String methodHandler(@Nullable Throwable e);
                        |
                        |    @NotNull
                        |    String methodHandler();
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    @NotNull
                        |    default String methodHandler(@Nullable Throwable e) {
                        |        return EffAnno.MethodAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                        |    @NotNull
                        |    default String methodHandler() {
                        |        return EffAnno.MethodAnno.name() + ":" + HandlerLocation.Super.name() + ":" + doDefaultFallback();
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
    }
    file.appendText(
        """
                        |
                        |}
                        |
        """.trimMargin()
    )
}

fun generateJavaDemo(pkgPath: String, basePkg: String, case: Case, interfaceLang: String) {
    val className = "Case${case.sn}${interfaceLang}InterfaceJavaDemo"
    val file = File("$pkgPath/$className.java")
    file.writeText(
        """
                        |// Generated by generateDemo task, DO NOT MODIFY
                        |package $basePkg.demos;
                        |
        """.trimMargin()
    )
    if (case.classAnnoOnClass.exist || case.originMethodInClass.withAnno) {
        file.appendText(
            """
                        |
                        |import com.alibaba.csp.sentinel.annotation.SentinelResource;
            """.trimMargin()
        )
    }
    val hasHandlerInClass = case.hasHandlerInClass && (case.classAnnoOnClass.hasAttr ||
            case.classAnnoOnSuper.hasAttr ||
            case.originMethodInClass.hasAttr ||
            case.originMethodInSuper.hasAttr)
    if (hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |import $basePkg.biz.EffAnno;
                        |import $basePkg.biz.HandlerLocation;
            """.trimMargin()
        )
    }
    if (case.originMethodInClass.exist || hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |import org.jetbrains.annotations.NotNull;
                        |import org.jetbrains.annotations.Nullable;
           """.trimMargin()
        )
    }
    file.appendText(
        """
                        |
                        |import org.springframework.stereotype.Component;
                        |
        """.trimMargin()
    )
    if (hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |import static $basePkg.biz.Greeting.doDefaultFallback;
            """.trimMargin()
        )
    }
    if (case.originMethodInClass.exist) {
        file.appendText(
            """
                        |import static $basePkg.biz.Greeting.doGreeting;
            """.trimMargin()
        )
    }
    if (hasHandlerInClass || case.originMethodInClass.exist) {
        file.appendText("\n")
    }
    file.appendText(
        """
                        |
                        |/**
                        | * Case: $case
                        | */
                        |@SuppressWarnings("unused")
        """.trimMargin()
    )
    if (case.classAnnoOnClass.exist) {
        val optionalAttr = if (case.classAnnoOnClass.hasAttr) ", defaultFallback = \"classHandler\"" else ""
        file.appendText(
            """
                        |
                        |@SentinelResource(value = "demo"${optionalAttr})
            """.trimMargin()
        )
    }
    file.appendText(
        """
                        |
                        |@Component
                        |public class $className implements Case${case.sn}${interfaceLang}InterfaceForJava {
                        |
        """.trimMargin()
    )
    if (case.originMethodInClass.exist) {
        if (case.originMethodInClass.withAnno) {
            val optionalAttr = if (case.originMethodInClass.hasAttr) ", defaultFallback = \"methodHandler\"" else ""
            file.appendText(
                """
                        |
                        |    @SentinelResource(value = "demo"$optionalAttr)
                """.trimMargin()
            )
        }
        if (case.originMethodInSuper.exist) {
            file.appendText(
                """
                        |
                        |    @Override
                """.trimMargin()
            )
        }
        file.appendText(
            """
                        |
                        |    @NotNull
                        |    public String greeting(@Nullable String name) {
                        |        return doGreeting(name);
                        |    }
                        |
            """.trimMargin()
        )
    }
    if (hasHandlerInClass) {
        if (case.classAnnoOnSuper.hasAttr) {
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String superClassHandler(@Nullable Throwable e) {
                        |        return EffAnno.SuperClassAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                """.trimMargin()
            )
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String superClassHandler() {
                        |        return EffAnno.SuperClassAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback();
                        |    }
                        |
                """.trimMargin()
            )
        }
        if (case.originMethodInSuper.hasAttr) {
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String superMethodHandler(@Nullable Throwable e) {
                        |        return EffAnno.SuperMethodAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                """.trimMargin()
            )
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String superMethodHandler() {
                        |        return EffAnno.SuperMethodAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback();
                        |    }
                        |
                """.trimMargin()
            )
        }
        if (case.classAnnoOnClass.hasAttr) {
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String classHandler(@Nullable Throwable e) {
                        |        return EffAnno.ClassAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                """.trimMargin()
            )
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String classHandler() {
                        |        return EffAnno.ClassAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback();
                        |    }
                        |
                """.trimMargin()
            )
        }
        if (case.originMethodInClass.hasAttr) {
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String methodHandler(@Nullable Throwable e) {
                        |        return EffAnno.MethodAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback(e);
                        |    }
                        |
                """.trimMargin()
            )
            if (case.handlerInSuper.exist) {
                file.appendText(
                    """
                        |
                        |    @Override
                    """.trimMargin()
                )
            }
            file.appendText(
                """
                        |
                        |    @NotNull
                        |    public String methodHandler() {
                        |        return EffAnno.MethodAnno.name() + ":" + HandlerLocation.Class.name() + ":" + doDefaultFallback();
                        |    }
                        |
                """.trimMargin()
            )
        }
    }
    file.appendText(
        """
                        |
                        |}
                        |
        """.trimMargin()
    )
}

fun generateKotlinInterface(pkgPath: String, basePkg: String, case: Case, classLang: String) {
    val interfaceName = "Case${case.sn}KotlinInterfaceFor$classLang"
    val file = File("$pkgPath/$interfaceName.kt")
    file.writeText(
        """
                        |// Generated by generateDemo task, DO NOT MODIFY
                        |package $basePkg.demos
                        |
        """.trimMargin()
    )
    if (case.classAnnoOnSuper.exist || case.originMethodInSuper.withAnno) {
        file.appendText(
            """
                        |
                        |import com.alibaba.csp.sentinel.annotation.SentinelResource
            """.trimMargin()
        )
    }
    val handlerInSuper = case.handlerInSuper.exist && (case.classAnnoOnClass.hasAttr ||
            case.classAnnoOnSuper.hasAttr ||
            case.originMethodInClass.hasAttr ||
            case.originMethodInSuper.hasAttr)
    if (handlerInSuper) {
        if (!case.handlerInSuper.requireOverride) {
            file.appendText(
                """
                        |
                        |import $basePkg.biz.EffAnno
                """.trimMargin()
            )
        }
    }
    if (
        (case.originMethodInSuper.exist && !case.originMethodInSuper.requireOverride)
        || (handlerInSuper && !case.handlerInSuper.requireOverride)
    ) {
        file.appendText(
            """
                        |
                        |import $basePkg.biz.Greeting
            """.trimMargin()
        )
    }
    if (handlerInSuper && !case.handlerInSuper.requireOverride) {
        file.appendText(
            """
                        |
                        |import $basePkg.biz.HandlerLocation
            """.trimMargin()
        )
    }
    file.appendText("\n")
    file.appendText(
        """
                        |
                        |/**
                        | * Case: $case
                        | */
        """.trimMargin()
    )
    if (case.classAnnoOnSuper.exist) {
        val optionalAttr = if (case.classAnnoOnSuper.hasAttr) ", defaultFallback = \"superClassHandler\"" else ""
        file.appendText(
            """
                        |
                        |@SentinelResource(value = "demo"${optionalAttr})
            """.trimMargin()
        )
    }
    if (case.originMethodInSuper.exist || handlerInSuper) {
        file.appendText(
            """
                        |
                        |interface $interfaceName {
                        |
            """.trimMargin()
        )
    } else {
        file.appendText(
            """
                        |
                        |interface $interfaceName
                        |
            """.trimMargin()
        )
    }
    if (case.originMethodInSuper.exist) {
        if (case.originMethodInSuper.withAnno) {
            val optionalAttr = if (case.originMethodInSuper.hasAttr) ", defaultFallback = \"superMethodHandler\"" else ""
            file.appendText(
                """
                        |
                        |    @SentinelResource(value = "demo"$optionalAttr)
                """.trimMargin()
            )
        }
        if (case.originMethodInSuper.requireOverride) {
            file.appendText(
                """
                        |
                        |    fun greeting(name: String?): String
                        |
                """.trimMargin()
            )
        } else {
            file.appendText(
                """
                        |
                        |    fun greeting(name: String?): String = "super:" + Greeting.doGreeting(name)
                        |
                """.trimMargin()
            )
        }
    }
    if (handlerInSuper) {
        if (case.classAnnoOnSuper.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    fun superClassHandler(e: Throwable?): String
                        |
                        |    fun superClassHandler(): String
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    fun superClassHandler(e: Throwable?): String {
                        |        return EffAnno.SuperClassAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    fun superClassHandler(): String {
                        |        return EffAnno.SuperClassAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
        if (case.originMethodInSuper.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    fun superMethodHandler(e: Throwable?): String
                        |
                        |    fun superMethodHandler(): String
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    fun superMethodHandler(e: Throwable?): String {
                        |        return EffAnno.SuperMethodAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    fun superMethodHandler(): String {
                        |        return EffAnno.SuperMethodAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
        if (case.classAnnoOnClass.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    fun classHandler(e: Throwable?): String
                        |
                        |    fun classHandler(): String
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    fun classHandler(e: Throwable?): String {
                        |        return EffAnno.ClassAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    fun classHandler(): String {
                        |        return EffAnno.ClassAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
        if (case.originMethodInClass.hasAttr) {
            if (case.handlerInSuper.requireOverride) {
                file.appendText(
                    """
                        |
                        |    fun methodHandler(e: Throwable?): String
                        |
                        |    fun methodHandler(): String
                        |
                    """.trimMargin()
                )
            } else {
                file.appendText(
                    """
                        |
                        |    fun methodHandler(e: Throwable?): String {
                        |        return EffAnno.MethodAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    fun methodHandler(): String {
                        |        return EffAnno.MethodAnno.name + ":" + HandlerLocation.Super.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                    """.trimMargin()
                )
            }
        }
    }
    if (case.originMethodInSuper.exist || handlerInSuper) {
        file.appendText(
            """
                        |
                        |}
                        |
            """.trimMargin()
        )
    }
}

fun generateKotlinDemo(pkgPath: String, basePkg: String, case: Case, interfaceLang: String) {
    val className = "Case${case.sn}${interfaceLang}InterfaceKotlinDemo"
    val file = File("$pkgPath/$className.kt")
    file.writeText(
        """
                        |// Generated by generateDemo task, DO NOT MODIFY
                        |package $basePkg.demos
                        |
        """.trimMargin()
    )
    if (case.classAnnoOnClass.exist || case.originMethodInClass.withAnno) {
        file.appendText(
            """
                        |
                        |import com.alibaba.csp.sentinel.annotation.SentinelResource
            """.trimMargin()
        )
    }
    val hasHandlerInClass = case.hasHandlerInClass && (case.classAnnoOnClass.hasAttr ||
            case.classAnnoOnSuper.hasAttr ||
            case.originMethodInClass.hasAttr ||
            case.originMethodInSuper.hasAttr)
    if (hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |import $basePkg.biz.EffAnno
            """.trimMargin()
        )
    }
    if (case.originMethodInClass.exist || hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |import $basePkg.biz.Greeting
            """.trimMargin()
        )
    }
    if (hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |import $basePkg.biz.HandlerLocation
            """.trimMargin()
        )
    }
    file.appendText(
        """
                        |
                        |import org.springframework.stereotype.Component
                        |
                        |/**
                        | * Case: $case
                        | */
        """.trimMargin()
    )
    if (case.classAnnoOnClass.exist) {
        val optionalAttr = if (case.classAnnoOnClass.hasAttr) ", defaultFallback = \"classHandler\"" else ""
        file.appendText(
            """
                        |
                        |@SentinelResource(value = "demo"${optionalAttr})
            """.trimMargin()
        )
    }
    file.appendText(
        """
                        |
                        |@Component
                        |class $className : Case${case.sn}${interfaceLang}InterfaceForKotlin
        """.trimMargin()
    )
    if (case.originMethodInClass.exist || hasHandlerInClass) {
        file.appendText(" {\n")
    } else {
        file.appendText("\n")
    }
    if (case.originMethodInClass.exist) {
        if (case.originMethodInClass.withAnno) {
            val optionalAttr = if (case.originMethodInClass.hasAttr) ", defaultFallback = \"methodHandler\"" else ""
            file.appendText(
                """
                        |
                        |    @SentinelResource(value = "demo"$optionalAttr)
                """.trimMargin()
            )
        }
        val optionalOverrideKeyword = if (case.originMethodInSuper.exist) "override " else ""
        file.appendText(
            """
                        |
                        |    ${optionalOverrideKeyword}fun greeting(name: String?): String {
                        |        return Greeting.doGreeting(name)
                        |    }
                        |
            """.trimMargin()
        )
    }
    if (case.hasHandlerInClass) {
        val optionalOverrideKeyword = if (case.handlerInSuper.exist) "override " else ""
        if (case.classAnnoOnSuper.hasAttr) {
            file.appendText(
                """
                        |
                        |    ${optionalOverrideKeyword}fun superClassHandler(e: Throwable?): String {
                        |        return EffAnno.SuperClassAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    ${optionalOverrideKeyword}fun superClassHandler(): String {
                        |        return EffAnno.SuperClassAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                """.trimMargin()
            )
        }
        if (case.originMethodInSuper.hasAttr) {
            file.appendText(
                """
                        |
                        |    ${optionalOverrideKeyword}fun superMethodHandler(e: Throwable?): String {
                        |        return EffAnno.SuperMethodAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    ${optionalOverrideKeyword}fun superMethodHandler(): String {
                        |        return EffAnno.SuperMethodAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                """.trimMargin()
            )
        }
        if (case.classAnnoOnClass.hasAttr) {
            file.appendText(
                """
                        |
                        |    ${optionalOverrideKeyword}fun classHandler(e: Throwable?): String {
                        |        return EffAnno.ClassAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    ${optionalOverrideKeyword}fun classHandler(): String {
                        |        return EffAnno.ClassAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                """.trimMargin()
            )
        }
        if (case.originMethodInClass.hasAttr) {
            file.appendText(
                """
                        |
                        |    ${optionalOverrideKeyword}fun methodHandler(e: Throwable?): String {
                        |        return EffAnno.MethodAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback(e)
                        |    }
                        |
                        |    ${optionalOverrideKeyword}fun methodHandler(): String {
                        |        return EffAnno.MethodAnno.name + ":" + HandlerLocation.Class.name + ":" + Greeting.doDefaultFallback()
                        |    }
                        |
                """.trimMargin()
            )
        }
    }
    if (case.originMethodInClass.exist || hasHandlerInClass) {
        file.appendText(
            """
                        |
                        |}
                        |
            """.trimMargin()
        )
    }
}

fun generateCaseRunner(basePkg: String, case: Case) {
    val className = "Case${case.sn}Runner"
    val pkgPath = "src/main/java/${basePkg.replace(".", "/")}/demos"
    val file = File("$pkgPath/$className.java")
    file.writeText(
        """
            package $basePkg.demos;

            import lombok.extern.slf4j.Slf4j;
            import org.jetbrains.annotations.NotNull;
            import org.springframework.beans.BeansException;
            import org.springframework.boot.CommandLineRunner;
            import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
            import org.springframework.context.ApplicationContext;
            import org.springframework.context.ApplicationContextAware;
            import org.springframework.core.annotation.Order;
            import org.springframework.stereotype.Component;

            import static $basePkg.biz.Run.detectEffectiveness;
            import static $basePkg.biz.Run.detectProxyType;

            @ConditionalOnProperty(name = "run.only", havingValue = "case${case.sn}", matchIfMissing = true)
            @Component
            @Slf4j
            @Order(${case.sn.toInt()})
            public class $className implements CommandLineRunner, ApplicationContextAware {
                private ApplicationContext applicationContext;

                @Override
                public void setApplicationContext(@NotNull ApplicationContext applicationContext) throws BeansException {
                    this.applicationContext = applicationContext;
                }

                @Override
                public void run(String... args) {
                    String proxyType = detectProxyType(applicationContext, "${case.sn}");
                    log.info("case result: {},{},{}",
                            String.join(",",
                                    "${case.sn}",
                                    "${case.classAnnoOnSuper.name}",
                                    "${case.originMethodInSuper.name}",
                                    "${case.handlerInSuper.name}",
                                    "${case.classAnnoOnClass.name}",
                                    "${case.originMethodInClass.name}",
                                    "${if (case.hasHandlerInClass) "Yes" else "No"}"
                                    ),
                            detectEffectiveness(applicationContext, "${case.sn}"),
                            proxyType);
                }
            }

        """.trimIndent()
    )
}

data class Case(
    val sn: String,
    val classAnnoOnSuper: ClassAnno,
    val originMethodInSuper: OriginMethodInSuper,
    val handlerInSuper: HandlerInSuper,
    val classAnnoOnClass: ClassAnno,
    val originMethodInClass: OriginMethodInClass,
    val hasHandlerInClass: Boolean,
)

enum class ClassAnno(val exist: Boolean, val hasAttr: Boolean) {
    WithAttr(true, true),
    WithoutAttr(true, false),
    None(false, false),
}

enum class OriginMethodInSuper(
    val exist: Boolean,
    val withAnno: Boolean,
    val hasAttr: Boolean,
    val requireOverride: Boolean
) {
    WithAnnoHavingAttrWithBody(true, true, true, false),
    WithAnnoHavingAttrAbstract(true, true, true, true),
    WithAnnoNoAttrWithBody(true, true, false, false),
    WithAnnoNoAttrAbstract(true, true, false, true),
    WithoutAnnoWithBody(true, false, false, false),
    WithoutAnnoAbstract(true, false, false, true),
}

enum class HandlerInSuper(val exist: Boolean, val requireOverride: Boolean) {
    WithBody(true, false),
    Abstract(true, true),
    None(false, false),
}

enum class OriginMethodInClass(val exist: Boolean, val withAnno: Boolean, val hasAttr: Boolean) {
    WithAnnoHavingAttr(true, true, true),
    WithAnnoNoAttr(true, true, false),
    WithoutAnno(true, false, false),
    None(false, false, false),
}
