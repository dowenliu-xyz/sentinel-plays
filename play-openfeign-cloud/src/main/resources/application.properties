spring.main.web-application-type=servlet

# TODO feign sentinel 降级静态规则? 没有找到相关文档说明，源码中只找到一个 testcase
#feign.sentinel.rules.a.resource=

spring.cloud.sentinel.transport.dashboard=localhost:8070
spring.cloud.sentinel.transport.port=8719

# 1.8.6
# 禁用 spring.cloud.sentinel.enabled ， dashboard 不上报
# 全部默认配置，没有 feign 资源
# TODO 相对默认配置，仅启用 spring.cloud.openfeign.circuitbreaker.enabled , feign 资源粒度为 class ，名称为 @FeignClient name
# 相对默认配置，仅启用 feign.sentinel.enabled , feign 资源粒度为 method ，名称示例： GET:http://localhost:8011/status/{code}
# 同时启用 spring.cloud.openfeign.circuitbreaker.enabled 和 feign.sentinel.enabled ， feign 资源粒度为 method ，名称示例： GET:http://localhost:8011/status/{code}

# 是否启用 openfeign 适配。默认 false
# 这与是否启用 Sentinel 自动配置无关：如果配置了就应用 Sentinel 的流控规则，没有就只提供基础的 feign client 降级能力。
# 只要启用， fallback 、fallbackFactory 就可以生效，即使其他三项都设置为 false 。
# 如果未启用，想要 fallback 、 fallbackFactory 生效，需要同时启用 spring.cloud.circuitbreaker.sentinel.enabled 、 spring.cloud.openfeign.circuitbreaker.enabled 。spring.cloud.sentinel.enabled 无关。
feign.sentinel.enabled=false
# 是否启用 Sentinel 自动配置：properties 和 SentinelResourceAspect；web 、 webflux。默认 true
spring.cloud.sentinel.enabled=true
# 启用 circuitbreaker 适配。会提供 CircuitBreakerFactory 。默认 true
spring.cloud.circuitbreaker.sentinel.enabled=true
# 启用 openfeign 的 circuitbreaker 适配。需要 CircuitBreakerFactory 。默认 false
spring.cloud.openfeign.circuitbreaker.enabled=true

